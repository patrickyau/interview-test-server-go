// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// AllTaxBracketResponses defines model for AllTaxBracketResponses.
type AllTaxBracketResponses map[string]TaxBracketResponses

// CalculateRequest defines model for CalculateRequest.
type CalculateRequest struct {
	Salary float32 `json:"salary"`
}

// CalculateResponse defines model for CalculateResponse.
type CalculateResponse struct {
	EffectiveTaxRate string       `json:"effective_tax_rate"`
	Salary           float32      `json:"salary"`
	TaxOwedPerBand   []TaxBracket `json:"tax_owed_per_band"`
	TaxYear          string       `json:"tax_year"`
	TotalTaxOwed     float32      `json:"total_tax_owed"`
}

// HealthCheckResponses defines model for HealthCheckResponses.
type HealthCheckResponses struct {
	Status string `json:"status"`
}

// TaxBracket defines model for TaxBracket.
type TaxBracket struct {
	Max     float32 `json:"max"`
	Min     float32 `json:"min"`
	Rate    float32 `json:"rate"`
	TaxOwed float32 `json:"tax_owed,omitempty"`
}

// TaxBracketResponses defines model for TaxBracketResponses.
type TaxBracketResponses = []TaxBracket

// CalculateJSONRequestBody defines body for Calculate for application/json ContentType.
type CalculateJSONRequestBody = CalculateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get tax bracket for the default year 2022
	// (GET /)
	GetTaxCalculator(w http.ResponseWriter, r *http.Request)
	// Check
	// (GET /health)
	Check(w http.ResponseWriter, r *http.Request)
	// Get all tax brackets
	// (GET /tax-years)
	GetAllTaxCalculator(w http.ResponseWriter, r *http.Request)
	// Get tax bracket for the given year
	// (GET /tax-years/{year})
	GetTaxCalculatorByYear(w http.ResponseWriter, r *http.Request, year string)
	// Calculate
	// (POST /tax-years/{year}/calculate)
	Calculate(w http.ResponseWriter, r *http.Request, year string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get tax bracket for the default year 2022
// (GET /)
func (_ Unimplemented) GetTaxCalculator(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check
// (GET /health)
func (_ Unimplemented) Check(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all tax brackets
// (GET /tax-years)
func (_ Unimplemented) GetAllTaxCalculator(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tax bracket for the given year
// (GET /tax-years/{year})
func (_ Unimplemented) GetTaxCalculatorByYear(w http.ResponseWriter, r *http.Request, year string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate
// (POST /tax-years/{year}/calculate)
func (_ Unimplemented) Calculate(w http.ResponseWriter, r *http.Request, year string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetTaxCalculator operation middleware
func (siw *ServerInterfaceWrapper) GetTaxCalculator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaxCalculator(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Check operation middleware
func (siw *ServerInterfaceWrapper) Check(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Check(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllTaxCalculator operation middleware
func (siw *ServerInterfaceWrapper) GetAllTaxCalculator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTaxCalculator(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTaxCalculatorByYear operation middleware
func (siw *ServerInterfaceWrapper) GetTaxCalculatorByYear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "year" -------------
	var year string

	err = runtime.BindStyledParameterWithOptions("simple", "year", chi.URLParam(r, "year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaxCalculatorByYear(w, r, year)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Calculate operation middleware
func (siw *ServerInterfaceWrapper) Calculate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "year" -------------
	var year string

	err = runtime.BindStyledParameterWithOptions("simple", "year", chi.URLParam(r, "year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Calculate(w, r, year)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetTaxCalculator)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.Check)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tax-years", wrapper.GetAllTaxCalculator)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tax-years/{year}", wrapper.GetTaxCalculatorByYear)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tax-years/{year}/calculate", wrapper.Calculate)
	})

	return r
}

type GetTaxCalculatorRequestObject struct {
}

type GetTaxCalculatorResponseObject interface {
	VisitGetTaxCalculatorResponse(w http.ResponseWriter) error
}

type GetTaxCalculator200JSONResponse TaxBracketResponses

func (response GetTaxCalculator200JSONResponse) VisitGetTaxCalculatorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CheckRequestObject struct {
}

type CheckResponseObject interface {
	VisitCheckResponse(w http.ResponseWriter) error
}

type Check200JSONResponse HealthCheckResponses

func (response Check200JSONResponse) VisitCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTaxCalculatorRequestObject struct {
}

type GetAllTaxCalculatorResponseObject interface {
	VisitGetAllTaxCalculatorResponse(w http.ResponseWriter) error
}

type GetAllTaxCalculator200JSONResponse AllTaxBracketResponses

func (response GetAllTaxCalculator200JSONResponse) VisitGetAllTaxCalculatorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaxCalculatorByYearRequestObject struct {
	Year string `json:"year"`
}

type GetTaxCalculatorByYearResponseObject interface {
	VisitGetTaxCalculatorByYearResponse(w http.ResponseWriter) error
}

type GetTaxCalculatorByYear200JSONResponse TaxBracketResponses

func (response GetTaxCalculatorByYear200JSONResponse) VisitGetTaxCalculatorByYearResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaxCalculatorByYear400Response struct {
}

func (response GetTaxCalculatorByYear400Response) VisitGetTaxCalculatorByYearResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTaxCalculatorByYear404Response struct {
}

func (response GetTaxCalculatorByYear404Response) VisitGetTaxCalculatorByYearResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CalculateRequestObject struct {
	Year string `json:"year"`
	Body *CalculateJSONRequestBody
}

type CalculateResponseObject interface {
	VisitCalculateResponse(w http.ResponseWriter) error
}

type Calculate200JSONResponse CalculateResponse

func (response Calculate200JSONResponse) VisitCalculateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Calculate400Response struct {
}

func (response Calculate400Response) VisitCalculateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Calculate404Response struct {
}

func (response Calculate404Response) VisitCalculateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get tax bracket for the default year 2022
	// (GET /)
	GetTaxCalculator(ctx context.Context, request GetTaxCalculatorRequestObject) (GetTaxCalculatorResponseObject, error)
	// Check
	// (GET /health)
	Check(ctx context.Context, request CheckRequestObject) (CheckResponseObject, error)
	// Get all tax brackets
	// (GET /tax-years)
	GetAllTaxCalculator(ctx context.Context, request GetAllTaxCalculatorRequestObject) (GetAllTaxCalculatorResponseObject, error)
	// Get tax bracket for the given year
	// (GET /tax-years/{year})
	GetTaxCalculatorByYear(ctx context.Context, request GetTaxCalculatorByYearRequestObject) (GetTaxCalculatorByYearResponseObject, error)
	// Calculate
	// (POST /tax-years/{year}/calculate)
	Calculate(ctx context.Context, request CalculateRequestObject) (CalculateResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetTaxCalculator operation middleware
func (sh *strictHandler) GetTaxCalculator(w http.ResponseWriter, r *http.Request) {
	var request GetTaxCalculatorRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaxCalculator(ctx, request.(GetTaxCalculatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaxCalculator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaxCalculatorResponseObject); ok {
		if err := validResponse.VisitGetTaxCalculatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Check operation middleware
func (sh *strictHandler) Check(w http.ResponseWriter, r *http.Request) {
	var request CheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Check(ctx, request.(CheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Check")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CheckResponseObject); ok {
		if err := validResponse.VisitCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllTaxCalculator operation middleware
func (sh *strictHandler) GetAllTaxCalculator(w http.ResponseWriter, r *http.Request) {
	var request GetAllTaxCalculatorRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTaxCalculator(ctx, request.(GetAllTaxCalculatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTaxCalculator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllTaxCalculatorResponseObject); ok {
		if err := validResponse.VisitGetAllTaxCalculatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTaxCalculatorByYear operation middleware
func (sh *strictHandler) GetTaxCalculatorByYear(w http.ResponseWriter, r *http.Request, year string) {
	var request GetTaxCalculatorByYearRequestObject

	request.Year = year

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaxCalculatorByYear(ctx, request.(GetTaxCalculatorByYearRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaxCalculatorByYear")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaxCalculatorByYearResponseObject); ok {
		if err := validResponse.VisitGetTaxCalculatorByYearResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Calculate operation middleware
func (sh *strictHandler) Calculate(w http.ResponseWriter, r *http.Request, year string) {
	var request CalculateRequestObject

	request.Year = year

	var body CalculateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Calculate(ctx, request.(CalculateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Calculate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CalculateResponseObject); ok {
		if err := validResponse.VisitCalculateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/jNhD9KwTbo2yl7p502wTBNkBbFLu5FIFhjKmxxI1EcsmRPxDovxckZVt2lIUT",
	"e9P2Ejs0OfNm5r3h8IkLXRutUJHj2RN3osQawtePVXUP62sL4hHpMzqjlcPwC+S5JKkVVH9ZbdCSjOs/",
	"W1zwjP+U7m2mncF0yFSbcNoY5BnX868oiCd8PSr0yC+O3KM0I22in5HRUhFanpFtsE34DVSiqYDwM35r",
	"0JF3bw7AOKjAbvy3zodq6jnak320Cbf4rZEWc549bM1NLwI5JuA5ZlwsUJBc4oxgPbNA2MPvyEpVvMLh",
	"uRlIuEehV5jPDNrZHFTujUnC+hXl7lUZrIXNK91vEOw5SSBNUM22gVyMDkdme1iHsrarRTJU4jM49RtC",
	"ReVNieLxQKFHUiCgxr09i8dSiObOgN1jxzOwNazPoWwt1TnHjzT3ZsVcjGg+niQkpQN3kbQfkOW9BO1D",
	"k2qhvascnbAy7OMZvy+ldEw6BszJ2lTIHNolWrbQlgUTS4krRuiIScU+6TFPeCUFdl1UQe3hfDQgSmST",
	"8RVPeGMrnvGSyLgsTVer1RjCz2Nti7Q769Lf725u//xyO/JnfFySKm/pbufz3vv8EtEE1zzhS7QuAv9l",
	"fBWchQQYEI9Q+OOFpLKZj4WuUw1GjoTOsUCV2kaRrDEc6P8wqmWeV7gC6yvywP/Y/cunbcK1QQVG8oz/",
	"2vkzQGUoWer/FFFHXkXgM3qX84x/QrqH9fbS0Z6Atl/1ydWV/xBaEapwHoyppAgW0q9Oq/088KbL3Zf7",
	"qMywZvO4L1SWSmQ5LqCpiPneySZXkwn351xT1+Hu8mEwOvlcWoaG+GJSQqf8kZkYbMgDqYj7mAh4DiO+",
	"2a2lBOuRD9B9r8pxTnufQr8wEw4E+LGq+nVzA2WFoS37mNMn/9GeTPDrzd/x/jVgoUZCn7aH41bj9zDS",
	"rDjkFfetiWdBWDzZNpTuQt/3Y9/Hkl6uDu/Ttp3+N0VWyCWqIBXf5D70QK3PBHVrrbbfx1NiFKnv8GoJ",
	"lcwjiA/vCWIgKQGUAKW0X2tUfmLn6SdziLCp2A76YbjR8XFyiGf3FogewGHOtOqZj/MiA5WHRb+rI+NR",
	"Q9v5OpH3ou/5kqwPz7BrnW8uRvhnb7z2cDjajmw/SnDPH2wvMGubU7/y7+mro2fHnL3axv8PufWZTFCE",
	"OWi/Ng1e4lQY6R3nu6A+sb/72mn7TwAAAP//KFU8F9MQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
